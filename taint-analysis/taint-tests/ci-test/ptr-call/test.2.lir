struct st {
  f1:int
  f2:&int
}

fn1:&(&int) -> int
fn2:&(int) -> &int
fn3:&(int, &int) -> int
fn5:&(&st, &int) -> &st

extern snk1:(int) -> _
extern snk2:(&int) -> _
extern snk3:(&&int) -> _
extern snk4:(&st) -> _
extern snk5:(int) -> _
extern snk6:(&int) -> _
extern snk7:(&&int) -> _
extern snk8:(&st) -> _
extern src1:() -> int
extern src10:(&st) -> int
extern src2:(&int) -> int
extern src3:(&&int) -> int
extern src4:(&int, &&int) -> int
extern src5:(&st) -> int
extern src6:() -> int
extern src7:(&int) -> int
extern src8:(&&int) -> int
extern src9:(&int, &&int) -> int

fn fn1(p:&int) -> int {
let _t1:int
entry:
  _t1 = $load p
  $ret _t1
}

fn fn2(p:int) -> &int {
let _t1:&int
entry:
  _t1 = $addrof p
  $ret _t1
}

fn fn3(p:int, q:&int) -> int {
let _t1:&int, _t2:int, _t3:int, _t4:int
bb1:
  _t2 = $load _t1
  _t3 = $call_dir fn1(q) then bb2

bb2:
  _t4 = $arith add _t2 _t3
  $ret _t4

entry:
  _t1 = $call_dir fn2(p) then bb1
}

fn fn5(p:&st, q:&int) -> &st {
let _t1:&int, _t2:int
bb1:
  $store _t1 _t2
  $ret p

entry:
  _t2 = $call_dir fn1(q) then bb1
}

fn main() -> int {
let _ret122:int, _t1:&int, _t10:int, _t100:&int, _t101:&int, _t102:int, _t103:int, _t104:&st, _t105:&&int, _t106:int, _t107:int, _t108:int, _t109:&int, _t11:int, _t110:int, _t111:&st, _t112:&&int, _t113:&int, _t114:&int, _t115:int, _t116:int, _t117:&st, _t118:&&int, _t119:&int, _t12:&int, _t120:&int, _t121:int, _t13:int, _t14:&int, _t15:&int, _t16:int, _t17:&int, _t18:int, _t19:int, _t2:int, _t20:&int, _t21:int, _t22:&&int, _t23:&int, _t24:&int, _t25:&int, _t26:int, _t27:&st, _t28:int, _t29:&&int, _t3:&st, _t30:&int, _t31:int, _t32:int, _t33:&int, _t34:&st, _t35:&int, _t36:int, _t37:&&int, _t38:&int, _t39:&st, _t4:&&int, _t40:&int, _t41:&st, _t42:&int, _t43:int, _t44:&int, _t45:int, _t46:&int, _t47:int, _t48:&int, _t49:int, _t5:&int, _t50:&int, _t51:&int, _t52:int, _t53:int, _t54:int, _t55:&&int, _t56:&int, _t57:int, _t58:int, _t59:&&int, _t6:&&int, _t60:&int, _t61:int, _t62:&int, _t63:&int, _t64:&&int, _t65:&int, _t66:int, _t67:int, _t68:&int, _t69:int, _t7:&int, _t70:&&&st, _t71:&&st, _t72:&&st, _t73:&st, _t74:int, _t75:&&&int, _t76:&&int, _t77:&int, _t78:int, _t79:int, _t8:int, _t80:&&st, _t81:int, _t82:&st, _t83:&int, _t84:&int, _t85:&int, _t86:&st, _t87:&int, _t88:int, _t89:&int, _t9:&int, _t90:int, _t91:&int, _t92:int, _t93:&&int, _t94:&int, _t95:&int, _t96:int, _t97:&&st, _t98:&st, _t99:&&int, id0:&st, id1:&st, id10:int, id11:&int, id12:&st, id13:&&int, id14:&int, id15:&int, id16:int, id17:&int, id18:int, id19:&int, id2:int, id20:&&&int, id21:int, id22:&st, id23:&(int) -> &int, id24:int, id25:&st, id26:&st, id27:&&&st, id28:&&int, id29:&st, id3:&int, id30:&&st, id31:&(&st) -> int, id32:&(&st, &int) -> &st, id33:&(&int) -> int, id34:&(int) -> &int, id4:int, id5:&st, id6:int, id7:&(int) -> &int, id8:&int, id9:&int
bb1:
  _t50 = $addrof id4
  $call_dir fn3(5, _t50) then bb18

bb15:
  _t42 = $gfp _t41 f1
  _t43 = $load _t42
  _t44 = $call_dir fn2(_t43) then bb16

bb16:
  $call_ext snk2(_t44)
  _t45 = $call_dir fn3(id18, id15) then bb1

bb18:
  $branch 1 bb24 bb22

bb22:
  _t79 = $call_ext src6()
  id24 = $copy _t79
  _t81 = $call_idr id31(id0) then bb27

bb24:
  $call_dir fn2(id6) then exit

bb27:
  _t85 = $addrof id24
  _t86 = $call_dir fn5(id12, _t85) then bb28

bb28:
  _ret122 = $copy id16
  $jump exit

bb6:
  _t13 = $call_dir fn1(_t12) then bb7

bb7:
  id6 = $copy _t13
  $jump bb1

entry:
  $branch _t2 bb6 bb15

exit:
  $ret _ret122
}