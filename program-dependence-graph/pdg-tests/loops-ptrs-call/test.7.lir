struct st {
  f1:int
  f2:&int
}

f1:&(int, &int) -> &int
f2:&(&st, &int) -> &st
f3:&(&int, &int) -> &st
test:&() -> int

fn f1(p:int, q:&int) -> &int {
let _lo1:int, _t10:&int, _t11:int, _t12:&&&&int, _t13:&&&int, _t14:&&&int, _t15:&&int, _t16:&&int, _t17:&int, _t18:int, _t19:int, _t2:&() -> int, _t20:&&&int, _t21:&&int, _t22:&int, _t23:int, _t24:&int, _t25:&&int, _t26:&int, _t27:int, _t28:&int, _t29:&int, _t3:&&&&&&int, _t30:int, _t31:&&int, _t32:&int, _t33:&int, _t34:&st, _t35:int, _t36:int, _t37:int, _t38:&int, _t4:&&&&&int, _t5:&&&&&int, _t6:&&&&int, _t7:&&&int, _t8:&&&&int, _t9:int, id42:&() -> int, id43:&() -> int, id44:&&() -> int, id45:&st, id46:int, id47:int, id48:&int, id49:&&int, id50:&&int, id51:&&int, id52:&&int, id53:int, id54:&int, id55:&&int, id56:&&&int, id57:&&&&int, id58:&&&int, id59:&&&&int, id60:&&&&&int, id61:int, id62:&int, id63:&() -> int, id64:int, id65:&&st, id66:&&st, id67:int, id68:&int, id69:&int, id70:&&int, id71:int, id72:&int, id73:&int
bb1:
  _t10 = $gep id62 _t9
  _t11 = $load _t10
  id61 = $copy _t11
  _t12 = $gep id57 id61
  _t13 = $load _t12
  id56 = $copy _t13
  _t14 = $gep id56 10
  _t15 = $load _t14
  id55 = $copy _t15
  _t16 = $gep id55 1
  _t17 = $load _t16
  id54 = $copy _t17
  id63 = $copy id43
  id66 = $copy id65
  _t18 = $cmp neq id65 id66
  id64 = $copy _t18
  id67 = $copy 9
  _t19 = $call_dir test() then bb2

bb10:
  $call_dir f2(id45, q) then bb11

bb11:
  id46 = $copy 8
  $jump bb5

bb12:
  $branch id47 bb13 bb14

bb13:
  $call_dir test() then bb15

bb14:
  id48 = $alloc 1 [_alloc10]
  id46 = $copy 0
  _t32 = $gep q id64
  $store _t32 id67
  _t33 = $addrof id46
  _t34 = $call_dir f3(id54, _t33) then bb18

bb15:
  _t29 = $gep id48 id46
  _t30 = $load _t29
  id47 = $copy _t30
  _t31 = $gep id49 id53
  $store _t31 id54
  $call_idr id63() then bb16

bb16:
  id62 = $alloc 1 [_alloc9]
  $call_dir test() then bb17

bb17:
  $jump bb12

bb18:
  $call_dir f2(_t34, id68) then bb19

bb19:
  $jump bb20

bb2:
  id71 = $copy _t19
  _t20 = $gep id58 id71
  _t21 = $load _t20
  id70 = $copy _t21
  _t22 = $load id70
  id69 = $copy _t22
  id68 = $copy id69
  _t23 = $call_dir test() then bb3

bb20:
  _t35 = $cmp lt p 5
  $branch _t35 bb21 bb22

bb21:
  _lo1 = $copy 1
  _t36 = $cmp eq _lo1 0
  $branch _t36 bb24 bb23

bb22:
  $jump bb5

bb23:
  p = $copy _lo1
  id68 = $alloc 1 [_alloc11]
  $call_dir f3(id72, id73) then bb25

bb24:
  _lo1 = $copy id64
  $jump bb23

bb25:
  $jump bb20

bb3:
  _t24 = $call_dir f1(_t23, q) then bb4

bb4:
  id72 = $copy _t24
  _t25 = $addrof id72
  _t26 = $load _t25
  id73 = $copy _t26
  $branch p bb6 bb7

bb5:
  _t37 = $load id48
  id73 = $alloc _t37 [_alloc12]
  _t38 = $addrof id67
  $ret _t38

bb6:
  _t27 = $call_idr id42() then bb8

bb7:
  $jump bb12

bb8:
  _t28 = $call_dir f1(p, q) then bb9

bb9:
  $call_dir f1(_t27, _t28) then bb10

entry:
  _t2 = $load id44
  id43 = $copy _t2
  id42 = $copy id43
  id45 = $copy id45
  id46 = $copy p
  id48 = $copy q
  id51 = $copy id52
  id50 = $copy id51
  id49 = $copy id50
  _t3 = $addrof id60
  _t4 = $load _t3
  id60 = $copy _t4
  _t5 = $gep id60 id53
  _t6 = $load _t5
  id59 = $copy _t6
  _t7 = $load id59
  id58 = $copy _t7
  _t8 = $addrof id58
  id57 = $copy _t8
  id62 = $copy id48
  _t9 = $call_dir test() then bb1
}

fn f2(p:&st, q:&int) -> &st {
let _t1:&&&int, _t10:&(&st, &int) -> &st, _t11:&&st, _t12:&&int, _t13:&int, _t14:&&int, _t15:&int, _t16:&int, _t17:int, _t18:&int, _t19:&int, _t2:&&int, _t20:&st, _t21:&int, _t22:&int, _t23:&st, _t24:&int, _t25:&st, _t3:&int, _t4:int, _t5:&(int, &int) -> &int, _t6:&&int, _t7:&int, _t8:&int, _t9:&int, id74:int, id75:&(&int, &int) -> &st, id76:&&int, id77:&int, id78:int, id79:&&int, id80:&int, id81:&(int, &int) -> &int, id82:&&(int, &int) -> &int, id83:int, id84:&int, id85:int, id86:&int, id87:&int, id88:&(&st, &int) -> &st, id89:&&(&st, &int) -> &st, id90:int, id91:int, id92:&&st, id93:&&&st
bb1:
  id77 = $copy _t3
  _t4 = $call_dir test() then bb2

bb10:
  _t21 = $addrof id85
  $call_dir f2(_t20, _t21) then bb11

bb11:
  id86 = $alloc 9 [_alloc14]
  _t22 = $addrof id90
  _t23 = $call_idr id88(p, _t22) then bb12

bb12:
  _t24 = $addrof id91
  $call_idr id88(_t23, _t24) then bb13

bb13:
  _t25 = $load id92
  $ret _t25

bb2:
  id78 = $copy _t4
  id79 = $copy id79
  id82 = $copy id82
  _t5 = $load id82
  id81 = $copy _t5
  id83 = $copy 0
  _t6 = $gfp p f2
  _t7 = $load _t6
  id84 = $copy _t7
  _t8 = $call_idr id81(id83, id84) then bb3

bb3:
  id80 = $copy _t8
  _t9 = $load id76
  id87 = $copy _t9
  id86 = $copy id87
  id89 = $copy id89
  _t10 = $load id89
  id88 = $copy _t10
  id90 = $copy 7
  _t11 = $load id93
  id92 = $copy _t11
  $jump bb4

bb4:
  $branch id74 bb5 bb6

bb5:
  _t12 = $gep id76 id74
  _t13 = $load _t12
  _t14 = $gfp p f2
  _t15 = $load _t14
  $call_idr id75(_t13, _t15) then bb7

bb6:
  _t18 = $load id79
  _t19 = $call_dir f1(5, id77) then bb8

bb7:
  _t16 = $gep id77 id78
  _t17 = $load _t16
  id77 = $alloc _t17 [_alloc13]
  $jump bb4

bb8:
  $call_dir f3(_t18, _t19) then bb9

bb9:
  _t20 = $call_idr id75(id77, id80) then bb10

entry:
  id75 = $copy f3
  _t1 = $addrof id76
  _t2 = $load _t1
  id76 = $copy _t2
  _t3 = $call_dir f1(6, id77) then bb1
}

fn f3(p:&int, q:&int) -> &st {
let _t1:int, _t2:int, _t3:&&&st, _t4:&&&st, _t5:&&st, _t6:int, _t7:&st, id94:int, id95:int, id96:&int, id97:&&st, id98:&&&st, id99:&&st
bb1:
  $call_dir f3(q, id96) then bb2

bb2:
  _t7 = $load id97
  $ret _t7

entry:
  _t1 = $load q
  id94 = $copy _t1
  _t2 = $load q
  id95 = $copy _t2
  _t3 = $addrof id99
  id98 = $copy _t3
  _t4 = $gep id98 3
  _t5 = $load _t4
  id97 = $copy _t5
  _t6 = $arith add id95 id95
  id94 = $copy _t6
  $call_dir test() then bb1
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _ret66:int, _t1:&int, _t10:&&int, _t11:&() -> int, _t12:&&() -> int, _t13:&() -> int, _t14:&st, _t15:&&(int, &int) -> &int, _t16:&&(int, &int) -> &int, _t17:&(int, &int) -> &int, _t18:&st, _t19:&&int, _t2:&int, _t20:int, _t21:&int, _t22:&int, _t23:&int, _t24:int, _t25:&&int, _t26:&int, _t27:&&int, _t28:&int, _t29:&&int, _t3:&int, _t30:&int, _t31:int, _t32:&&int, _t33:&int, _t34:int, _t35:&int, _t36:&st, _t37:&&int, _t38:&int, _t39:&int, _t4:&(&st, &int) -> &st, _t40:&int, _t41:&int, _t42:int, _t43:&int, _t44:int, _t45:&int, _t46:&int, _t47:int, _t48:int, _t49:&int, _t5:&st, _t50:&int, _t51:int, _t52:&int, _t53:int, _t54:&int, _t55:&int, _t56:&int, _t57:int, _t58:&int, _t59:&int, _t6:&int, _t60:&&(&st, &int) -> &st, _t61:int, _t62:&(&st, &int) -> &st, _t63:int, _t64:&int, _t65:int, _t7:int, _t8:int, _t9:&&&int, id0:&&&int, id1:int, id10:&int, id11:int, id12:int, id13:&st, id14:&(&st, &int) -> &st, id15:&(&st, &int) -> &st, id16:&&(&st, &int) -> &st, id17:&&(&st, &int) -> &st, id18:&st, id19:&&int, id2:&int, id20:int, id21:&() -> int, id22:&&() -> int, id23:&int, id24:int, id25:int, id26:&&int, id27:&st, id28:&st, id29:&st, id3:int, id30:&st, id31:&() -> int, id32:&st, id33:&&int, id34:&&int, id35:&(int, &int) -> &int, id36:&&(int, &int) -> &int, id37:&st, id38:&() -> int, id39:&() -> int, id4:&int, id40:&() -> int, id41:&(int, &int) -> &int, id5:&int, id6:&int, id7:int, id8:&int, id9:&int
bb1:
  id2 = $copy _t1
  _t2 = $call_dir f1(id3, id5) then bb24

bb24:
  $branch 2 bb37 bb40


bb37:
  f1 = $copy f1
  id12 = $copy 9
  _t55 = $addrof id25
  _t56 = $call_idr id35(6, _t55) then exit

bb40:
  $store id2 _t57
  _t58 = $call_dir f1(2, id5) then bb41

bb41:
  _t59 = $call_dir f1(id7, id8) then bb42

bb42:
  $call_dir f3(_t58, _t59) then exit

entry:
  id1 = $copy 10
  id3 = $copy id3
  _t1 = $call_dir f1(id3, id4) then bb1

exit:
  $ret _ret66
}
