f1:&() -> int
f2:&(int, int) -> int
test:&() -> int

extern e1:() -> int
extern e2:(int) -> int

fn f1() -> int {
entry:
  $ret 0
}

fn f2(p:int, q:int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _t1:int, _t10:int, _t11:int, _t12:int, _t13:int, _t2:int, _t3:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int
bb1:
  id0 = $copy id0
  $call_ext e2(id1)
  _t13 = $call_dir f2(9, id0) then bb5

bb2:
  $call_dir test() then bb4

bb3:
  _t4 = $call_ext e1()
  _t5 = $call_ext e1()
  _t6 = $cmp neq _t4 _t5
  _t7 = $call_ext e2(_t6)
  _t8 = $call_ext e1()
  _t9 = $cmp eq _t7 _t8
  id0 = $copy _t9
  _t10 = $call_ext e1()
  id0 = $copy _t10
  _t11 = $arith sub 0 1
  _t12 = $call_ext e2(_t11)
  id0 = $copy _t12
  $jump bb1

bb4:
  $jump bb1

bb5:
  id1 = $copy _t13
  $ret 0

entry:
  id0 = $copy 7
  _t1 = $arith sub 0 4
  _t2 = $arith sub 0 _t1
  _t3 = $cmp eq 7 _t2
  $branch _t3 bb2 bb3
}