fn func_test_jump(p1:int, p2:&int, p3: int) -> int {
    let _t1:int, x:int, _t2:int, _t3:&int, _t4:&&&&int, _t5:int
    
    entry:
    x = $copy 1
    _t1 = $copy x
    _t2 = $arith add p3 2
    $jump bb1

    bb1:
    _t2 = $arith add x 2
    p3 = $arith mul 3 2
    $ret x
}

fn func_test_branch(p1:int, p2:&&&int) -> int {
    let x:int, y:int, z:int, _t1:int, _t2:int, _t3:int

    entry:
    x = $copy 1
    _t1 = $arith sub x 1
    _t2 = $cmp eq x _t1
    $branch _t2 bb1 bb2

    bb1:
    _t2 = $arith sub x 1 
    _t3 = $cmp lte _t2 x 
    $branch -1 bb3 bb5

    bb2:
    x = $copy _t1
    $jump bb1

    bb3:
    x = $copy p1
    _t1 = $cmp neq x 3
    $branch _t1 bb4 bb5

    bb4: 
    x = $copy p1
    $jump bb1

    bb5:
    $ret 0
}

fn main() -> int {
    let x:int, y:int, z:int, a:int, b:int
    entry:
    $ret x
}