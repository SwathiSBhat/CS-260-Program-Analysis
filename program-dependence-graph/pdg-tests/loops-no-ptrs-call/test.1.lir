test:&() -> int

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _lo2:int, _t3:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int, id3:int, id4:int, id5:int, id6:int, id7:int
bb1:
  id6 = $copy _lo1
  id0 = $copy 4
  _t4 = $arith div id1 1
  id0 = $copy _t4
  $branch 2 bb4 bb5

bb10:
  _lo2 = $copy 0
  _t8 = $cmp eq _lo2 0
  $branch _t8 bb13 bb12

bb11:
  id3 = $copy id7
  $ret 3

bb12:
  id1 = $copy _lo2
  $jump bb14

bb13:
  _lo2 = $copy id7
  $jump bb12

bb14:
  _t9 = $cmp gt 9 id6
  $branch _t9 bb15 bb16

bb15:
  id1 = $copy id0
  id1 = $copy id4
  $jump bb14

bb16:
  id5 = $copy id0
  id1 = $copy 6
  id1 = $copy 6
  $jump bb9

bb2:
  _lo1 = $copy id5
  $jump bb1

bb3:
  _t7 = $cmp lt 4 3
  id5 = $copy _t7
  $jump bb9

bb4:
  id2 = $copy id3
  $jump bb3

bb5:
  _t5 = $arith mul id1 id4
  $branch _t5 bb7 bb8

bb6:
  $jump bb3

bb7:
  id2 = $copy id5
  id5 = $copy 5
  $jump bb6

bb8:
  _t6 = $cmp neq id7 5
  id6 = $copy _t6
  id0 = $copy 6
  $jump bb6

bb9:
  $branch 6 bb10 bb11

entry:
  id0 = $copy 1
  id1 = $copy 0
  id2 = $copy 6
  id3 = $copy 6
  id4 = $copy id4
  _lo1 = $copy id3
  _t3 = $cmp neq _lo1 0
  $branch _t3 bb2 bb1
}