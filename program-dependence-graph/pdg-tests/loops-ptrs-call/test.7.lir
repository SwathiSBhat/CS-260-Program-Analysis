struct st {
  f1:int
  f2:&int
}

f1:&(int, &int) -> &int
f2:&(&st, &int) -> &st
f3:&(&int, &int) -> &st
test:&() -> int


fn f1(p:int, q:&int) -> &int {
let _lo1:int, _t10:&int, _t11:int, _t12:&&&&int, _t13:&&&int, _t14:&&&int, _t15:&&int, _t16:&&int, _t17:&int, _t18:int, _t19:int, _t2:&() -> int, _t20:&&&int, _t21:&&int, _t22:&int, _t23:int, _t24:&int, _t25:&&int, _t26:&int, _t27:int, _t28:&int, _t29:&int, _t3:&&&&&&int, _t30:int, _t31:&&int, _t32:&int, _t33:&int, _t34:&st, _t35:int, _t36:int, _t37:int, _t38:&int, _t4:&&&&&int, _t5:&&&&&int, _t6:&&&&int, _t7:&&&int, _t8:&&&&int, _t9:int, id42:&() -> int, id43:&() -> int, id44:&&() -> int, id45:&st, id46:int, id47:int, id48:&int, id49:&&int, id50:&&int, id51:&&int, id52:&&int, id53:int, id54:&int, id55:&&int, id56:&&&int, id57:&&&&int, id58:&&&int, id59:&&&&int, id60:&&&&&int, id61:int, id62:&int, id63:&() -> int, id64:int, id65:&&st, id66:&&st, id67:int, id68:&int, id69:&int, id70:&&int, id71:int, id72:&int, id73:&int
bb1:
  _t10 = $gep id62 _t9
  _t11 = $load _t10
  id61 = $copy _t11
  _t12 = $gep id57 id61
  _t13 = $load _t12
  id56 = $copy _t13
  _t14 = $gep id56 10
  _t15 = $load _t14
  id55 = $copy _t15
  _t16 = $gep id55 1
  _t17 = $load _t16
  id54 = $copy _t17
  id63 = $copy id43
  id66 = $copy id65
  _t18 = $cmp neq id65 id66
  id64 = $copy _t18
  id67 = $copy 9
  _t19 = $call_dir test() then bb2 

bb10:
  _t24 = $call_dir f1(_t23, q) then bb11

bb11:
  id46 = $copy 8
  $jump bb5

bb12:
  $branch id47 bb13 bb14

bb13:
  $call_dir test() then bb15

bb14:
  id48 = $alloc 1 [_alloc10]
  id46 = $copy 0
  _t32 = $gep q id64
  $store _t32 id67
  _t33 = $addrof id46
  $jump bb12

bb15:
  _t29 = $gep id48 id46
  _t30 = $load _t29
  id47 = $copy _t30
  _t31 = $gep id49 id53
  $store _t31 id54
  $jump bb5

bb2:
  id71 = $copy _t19
  _t20 = $gep id58 id71
  _t21 = $load _t20
  id70 = $copy _t21
  _t22 = $load id70
  id69 = $copy _t22
  id68 = $copy id69
  _t23 = $call_dir test() then bb3

bb3:
  _t24 = $call_dir f1(_t23, q) then bb4

bb4:
  id72 = $copy _t24
  _t25 = $addrof id72
  _t26 = $load _t25
  id73 = $copy _t26
  $branch p bb6 bb7

bb5:
  _t37 = $load id48
  id73 = $alloc _t37 [_alloc12]
  _t38 = $addrof id67
  $ret _t38

bb6:
  _t27 = $call_idr id42() then bb8

bb7:
  $jump bb12

bb8:
  _t28 = $call_dir f1(p, q) then bb9

bb9:
  $call_dir f1(_t27, _t28) then bb10

entry:
  _t2 = $load id44
  id43 = $copy _t2
  id42 = $copy id43
  id45 = $copy id45
  id46 = $copy p
  id48 = $copy q
  id51 = $copy id52
  id50 = $copy id51
  id49 = $copy id50
  _t3 = $addrof id60
  _t4 = $load _t3
  id60 = $copy _t4
  _t5 = $gep id60 id53
  _t6 = $load _t5
  id59 = $copy _t6
  _t7 = $load id59
  id58 = $copy _t7
  _t8 = $addrof id58
  id57 = $copy _t8
  id62 = $copy id48
  _t9 = $call_dir test() then bb1
}


fn test() -> int {
let _ret66:int, _t1:&int, _t10:&&int, _t11:&() -> int, _t12:&&() -> int, _t13:&() -> int, _t14:&st, _t15:&&(int, &int) -> &int, _t16:&&(int, &int) -> &int, _t17:&(int, &int) -> &int, _t18:&st, _t19:&&int, _t2:&int, _t20:int, _t21:&int, _t22:&int, _t23:&int, _t24:int, _t25:&&int, _t26:&int, _t27:&&int, _t28:&int, _t29:&&int, _t3:&int, _t30:&int, _t31:int, _t32:&&int, _t33:&int, _t34:int, _t35:&int, _t36:&st, _t37:&&int, _t38:&int, _t39:&int, _t4:&(&st, &int) -> &st, _t40:&int, _t41:&int, _t42:int, _t43:&int, _t44:int, _t45:&int, _t46:&int, _t47:int, _t48:int, _t49:&int, _t5:&st, _t50:&int, _t51:int, _t52:&int, _t53:int, _t54:&int, _t55:&int, _t56:&int, _t57:int, _t58:&int, _t59:&int, _t6:&int, _t60:&&(&st, &int) -> &st, _t61:int, _t62:&(&st, &int) -> &st, _t63:int, _t64:&int, _t65:int, _t7:int, _t8:int, _t9:&&&int, id0:&&&int, id1:int, id10:&int, id11:int, id12:int, id13:&st, id14:&(&st, &int) -> &st, id15:&(&st, &int) -> &st, id16:&&(&st, &int) -> &st, id17:&&(&st, &int) -> &st, id18:&st, id19:&&int, id2:&int, id20:int, id21:&() -> int, id22:&&() -> int, id23:&int, id24:int, id25:int, id26:&&int, id27:&st, id28:&st, id29:&st, id3:int, id30:&st, id31:&() -> int, id32:&st, id33:&&int, id34:&&int, id35:&(int, &int) -> &int, id36:&&(int, &int) -> &int, id37:&st, id38:&() -> int, id39:&() -> int, id4:&int, id40:&() -> int, id41:&(int, &int) -> &int, id5:&int, id6:&int, id7:int, id8:&int, id9:&int
bb1:
  id2 = $copy _t1
  _t2 = $call_dir f1(id3, id5) then bb2

bb10:
  _t41 = $addrof id25
  _t42 = $cmp neq _t41 id4
  $branch _t42 bb25 bb26

bb11:
  id8 = $copy _t22
  $jump bb12

bb12:
  _t23 = $addrof id11
  _t24 = $cmp neq id9 _t23
  $branch _t24 bb13 bb14

bb13:
  id12 = $copy 2
  id3 = $copy 1
  _t25 = $gep id19 0
  _t26 = $load _t25
  $call_dir f1(10, _t26) then bb15

bb14:
  $ret 0

bb15:
  $call_idr id21() then bb16

bb16:
  $store id23 id24
  _t27 = $gfp id18 f2
  _t28 = $alloc 1 [_alloc2]
  $store _t27 _t28
  _t29 = $gfp id13 f2
  _t30 = $alloc 1 [_alloc3]
  $store _t29 _t30
  $jump bb12

bb2:
  id5 = $copy _t2
  id7 = $copy 4
  _t3 = $addrof id7
  id6 = $copy _t3
  id10 = $copy id2
  id9 = $copy id10
  id8 = $copy id9
  id16 = $copy id17
  _t4 = $load id16
  id15 = $copy _t4
  id14 = $copy id15
  id18 = $copy id13
  _t5 = $call_idr id14(id18, id6) then bb3


bb3:
  id13 = $copy _t5
  _t6 = $gfp id13 f1
  _t7 = $load _t6
  id12 = $copy _t7
  _t8 = $call_dir test() then bb4


bb4:
  id20 = $copy _t8
  _t9 = $gep id0 id20
  _t10 = $load _t9
  id19 = $copy _t10
  _t11 = $load id22
  id21 = $copy _t11
  id23 = $copy id2
  id24 = $copy 10
  id25 = $copy id1
  id26 = $copy id26
  id28 = $copy id27
  id27 = $copy id28
  id29 = $copy id27
  _t12 = $gep id22 id12
  _t13 = $load _t12
  id31 = $copy _t13
  $jump bb5

bb5:
  id32 = $copy _t14
  id33 = $copy id34
  _t15 = $addrof f1
  id36 = $copy _t15
  _t16 = $gep id36 id20
  _t17 = $load _t16
  id35 = $copy _t17
  $jump bb6

bb6:
  id37 = $copy _t18
  id40 = $copy id38
  id39 = $copy id40
  id38 = $copy id39
  id41 = $copy id35
  $call_dir test() then bb7

bb7:
  _t19 = $alloc 1 [_alloc1]
  $store id0 _t19
  id1 = $copy id1
  _t20 = $cmp eq id2 id5
  $branch _t20 bb9 bb10

bb9:
  _t21 = $gep id6 0
  $store _t21 id1
  _t22 = $call_dir f1(9, id10) then bb11

entry:
  id1 = $copy 10
  id3 = $copy id3
  _t1 = $call_dir f1(id3, id4) then bb1

exit:
  $ret _ret66
}

fn main() -> int{
    entry:
    $ret 0
}