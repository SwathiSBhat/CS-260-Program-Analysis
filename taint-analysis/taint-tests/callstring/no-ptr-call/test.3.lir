fn2:&(int, int) -> int
fn3:&(int, int, int) -> int

extern snk1:(int) -> _
extern snk2:(int) -> _
extern snk3:(int, int) -> _
extern snk4:(int, int) -> _
extern snk5:(int) -> _
extern snk6:(int) -> _
extern snk7:(int, int) -> _
extern snk8:(int, int) -> _
extern src1:() -> int
extern src2:() -> int
extern src3:() -> int
extern src4:() -> int
extern src5:() -> int
extern src6:() -> int
extern src7:() -> int
extern src8:() -> int

fn fn2(p:int, q:int) -> int {
let _t1:int
entry:
  _t1 = $arith add p q
  $ret _t1
}

fn fn3(p:int, q:int, r:int) -> int {
let _t1:int, _t2:int, _t3:int

bb2:
  _t3 = $arith add _t1 _t2
  $ret _t3

entry:
  _t1 = $call_dir fn2(p, q) then bb2
}

fn main() -> int {
let _lo1:int, _lo2:int, _ret25:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t15:int, _t16:int, _t17:int, _t18:int, _t19:int, _t20:int, _t21:int, _t22:int, _t23:int, _t24:int, _t3:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int, id3:int, id4:int, id5:int, id6:int, id7:int
bb11:
  _t10 = $call_ext src8()
  _lo2 = $copy _t10
  $branch _t11 bb14 bb13

bb13:
  $call_ext snk2(_lo2)
  $jump exit

bb14:
  _t12 = $call_dir fn3(7, 10, 0) then bb15

bb15:
  _lo2 = $copy _t12
  $jump bb13

bb3:
  id1 = $copy id1
  _t4 = $call_ext src6()
  _t5 = $call_dir fn3(9, _t4, id1) then bb4

bb4:
  $branch id0 bb11 exit

entry:
  $jump bb3

exit:
  $ret _ret25
}
