f1:&() -> int
f2:&(int, int) -> int
test:&() -> int

extern e1:() -> int
extern e2:(int) -> int

fn f1() -> int {
entry:
  $ret 0
}

fn f2(p:int, q:int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _t1:int, _t2:int, _t3:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int, id3:int
bb1:
  _t2 = $cmp gte id2 _t1
  _t3 = $arith sub 0 _t2
  _t4 = $cmp neq _t3 id2
  id1 = $copy _t4
  $call_ext e1()
  _t5 = $call_dir test() then bb2

bb2:
  id0 = $copy _t5
  _t6 = $call_ext e1()
  _t7 = $arith sub _t6 id1
  id1 = $copy _t7
  _t8 = $arith sub 0 id3
  _t9 = $arith sub 0 _t8
  $ret _t9

entry:
  _t1 = $call_dir test() then bb1
}
