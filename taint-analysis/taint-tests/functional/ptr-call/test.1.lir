struct st {
  f1:int
  f2:&int
}

fn1:&(&int) -> int
fn2:&(int) -> &int
fn3:&(int, &int) -> int
fn4:&(&st) -> int
fn5:&(&st, &int) -> &st

extern snk1:(int) -> _
extern snk2:(&int) -> _
extern snk3:(&&int) -> _
extern snk4:(&st) -> _
extern snk5:(int) -> _
extern snk6:(&int) -> _
extern snk7:(&&int) -> _
extern snk8:(&st) -> _
extern src1:() -> int
extern src10:(&st) -> int
extern src2:(&int) -> int
extern src3:(&&int) -> int
extern src4:(&int, &&int) -> int
extern src5:(&st) -> int
extern src6:() -> int
extern src7:(&int) -> int
extern src8:(&&int) -> int
extern src9:(&int, &&int) -> int

fn fn1(p:&int) -> int {
let _t1:int
entry:
  _t1 = $load p
  $ret _t1
}

fn fn2(p:int) -> &int {
let _t1:&int
entry:
  _t1 = $addrof p
  $ret _t1
}

fn fn3(p:int, q:&int) -> int {
let _t1:&int, _t2:int, _t3:int, _t4:int
bb1:
  _t2 = $load _t1
  _t3 = $call_dir fn1(q) then bb2

bb2:
  _t4 = $arith add _t2 _t3
  $ret _t4

entry:
  _t1 = $call_dir fn2(p) then bb1
}

fn fn4(p:&st) -> int {
let _t1:&&int, _t2:&int, _t3:int
bb1:
  $ret _t3

entry:
  _t1 = $gfp p f2
  _t2 = $load _t1
  _t3 = $call_dir fn1(_t2) then bb1
}

fn fn5(p:&st, q:&int) -> &st {
let _t1:&int, _t2:int
bb1:
  $store _t1 _t2
  $ret p

entry:
  _t1 = $gfp p f1
  _t2 = $call_dir fn1(q) then bb1
}

fn main() -> int {
let _ret48:int, _t1:&&int, _t10:int, _t11:&&int, _t12:&int, _t13:&int, _t14:int, _t15:int, _t16:&int, _t17:&&int, _t18:&int, _t19:int, _t2:&int, _t20:&int, _t21:&st, _t22:&&(&st, &int) -> &st, _t23:&int, _t24:int, _t25:&(&st, &int) -> &st, _t26:&&st, _t27:&st, _t28:&st, _t29:&int, _t3:int, _t30:int, _t31:&int, _t32:int, _t33:&&int, _t34:&int, _t35:&int, _t36:int, _t37:&&int, _t38:&int, _t39:&int, _t4:int, _t40:int, _t41:int, _t42:&int, _t43:&int, _t44:&int, _t45:int, _t46:&int, _t47:int, _t5:int, _t6:&int, _t7:int, _t8:&int, _t9:&int, id0:int, id1:&st, id10:&(int) -> &int, id11:&int, id12:&&st, id13:&int, id14:int, id15:int, id16:&int, id17:&int, id18:int, id19:&st, id2:&int, id20:int, id21:&st, id22:&st, id23:&int, id24:&int, id25:&st, id3:int, id4:int, id5:&int, id6:int, id7:&&int, id8:&&(&st, &int) -> &st, id9:&st
bb1:
  id0 = $copy _t3
  _t4 = $load id2
  id0 = $copy _t4
  _t5 = $load id2
  $call_dir fn2(_t5) then bb2

bb10:
  _t13 = $gep id5 0
  _t14 = $load _t13
  $branch _t14 bb13 bb14

bb11:
  _t10 = $cmp eq _t8 _t9
  $branch _t10 bb9 bb10

bb12:
  $branch id18 bb23 bb24

bb13:
  _t15 = $call_ext src1()
  _t16 = $call_dir fn2(_t15) then bb15

bb14:
  _t26 = $gep id12 3
  _t27 = $load _t26
  _t28 = $call_dir fn5(_t27, id13) then bb20

bb15:
  $call_ext snk2(_t16)
  _t17 = $gep id7 6
  _t18 = $load _t17
  _t19 = $call_dir fn1(_t18) then bb16

bb16:
  id6 = $copy _t19
  _t20 = $call_idr id10(4) then bb17

bb17:
  _t21 = $call_dir fn5(id9, _t20) then bb18

bb18:
  _t23 = $gep id2 5
  _t24 = $load _t23
  _t22 = $gep id8 _t24
  _t25 = $load _t22
  $call_idr _t25(_t21, id11) then bb19

bb19:
  $call_ext src9(id2, id7)
  $jump bb12

bb2:
  $branch 10 bb4 bb5

bb20:
  $call_dir fn4(_t28) then bb21

bb21:
  $call_ext snk1(id14)
  _t29 = $gep id17 id18
  _t30 = $load _t29
  _t31 = $gep id16 _t30
  _t32 = $load _t31
  id15 = $copy _t32
  _t33 = $gfp id19 f2
  _t34 = $load _t33
  _t35 = $gep _t34 6
  _t36 = $load _t35
  id15 = $copy _t36
  id2 = $alloc 1 [_alloc1]
  id13 = $alloc 1 [_alloc2]
  $jump bb12

bb23:
  id11 = $alloc 1 [_alloc3]
  id20 = $copy id18
  _t37 = $gfp id21 f2
  _t38 = $load _t37
  $call_dir fn1(_t38) then bb25

bb24:
  _t39 = $call_dir fn2(id0) then bb26

bb25:
  $call_ext snk8(id22)
  _ret48 = $copy 10
  $jump exit

bb26:
  _t40 = $call_ext src2(_t39)
  $call_dir fn2(_t40) then bb27

bb27:
  _t41 = $cmp eq id23 id24
  _t42 = $call_dir fn2(_t41) then bb28

bb28:
  $call_ext src7(_t42)
  id6 = $copy 1
  id20 = $copy 3
  id3 = $copy id20
  _ret48 = $copy 7
  $jump exit

bb29:
  _t44 = $gep _t43 4
  _t45 = $load _t44
  id2 = $alloc _t45 [_alloc4]
  $jump bb3

bb3:
  _t46 = $addrof id20
  _t47 = $cmp neq _t46 id16
  _ret48 = $copy _t47
  $jump exit

bb4:
  _t6 = $call_dir fn2(id0) then bb6

bb5:
  _t43 = $call_idr id10(id18) then bb29

bb6:
  _t7 = $call_dir fn1(_t6) then bb7

bb7:
  id3 = $copy _t7
  $jump bb8

bb8:
  _t8 = $addrof id4
  _t9 = $call_dir fn2(id3) then bb11

bb9:
  _t11 = $gfp id1 f2
  _t12 = $load _t11
  $store _t12 2
  $jump bb8

entry:
  _t1 = $gfp id1 f2
  _t2 = $load _t1
  _t3 = $call_dir fn3(4, _t2) then bb1

exit:
  $ret _ret48
}