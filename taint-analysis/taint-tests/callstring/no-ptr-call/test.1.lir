fn1:&(int) -> int
fn2:&(int, int) -> int
fn3:&(int, int, int) -> int
fn4:&(int) -> int

extern snk1:(int) -> _
extern snk2:(int) -> _
extern snk3:(int, int) -> _
extern snk4:(int, int) -> _
extern snk5:(int) -> _
extern snk6:(int) -> _
extern snk7:(int, int) -> _
extern snk8:(int, int) -> _
extern src1:() -> int
extern src2:() -> int
extern src3:() -> int
extern src4:() -> int
extern src5:() -> int
extern src6:() -> int
extern src7:() -> int
extern src8:() -> int

fn fn1(p:int) -> int {
let _t1:int
bb1:
  $ret _t1

entry:
  _t1 = $call_dir fn4(p) then bb1
}

fn fn2(p:int, q:int) -> int {
let _t1:int
entry:
  _t1 = $arith add p q
  $ret _t1
}

fn fn3(p:int, q:int, r:int) -> int {
let _t1:int, _t2:int, _t3:int
bb1:
  _t2 = $call_dir fn4(r) then bb2

bb2:
  _t3 = $arith add _t1 _t2
  $ret _t3

entry:
  _t1 = $call_dir fn2(p, q) then bb1
}

fn fn4(p:int) -> int {
entry:
  $ret p
}

fn main() -> int {
let _lo1:int, _ret35:int, _t10:int, _t11:int, _t12:int, _t13:int, _t14:int, _t15:int, _t16:int, _t17:int, _t18:int, _t19:int, _t2:int, _t20:int, _t21:int, _t22:int, _t23:int, _t24:int, _t25:int, _t26:int, _t27:int, _t28:int, _t29:int, _t3:int, _t30:int, _t31:int, _t32:int, _t33:int, _t34:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, _t9:int, id0:int, id1:int, id2:int, id3:int, id4:int, id5:int, id6:int, id7:int
bb1:
  $jump bb10

bb10:
  $branch 0 bb11 bb12

bb11:
  $branch 5 bb14 bb15

bb12:
  id0 = $copy 2
  $branch 2 bb30 bb31

bb13:
  $branch id7 bb24 bb25

bb14:
  id6 = $copy 9
  _t9 = $call_ext src1()
  $call_dir fn4(_t9) then bb16

bb15:
  _t10 = $call_ext src2()
  id5 = $copy _t10
  _lo1 = $copy 5
  _t11 = $cmp eq _lo1 0
  $branch _t11 bb18 bb17

bb16:
  id7 = $copy 1
  id7 = $copy id5
  id6 = $copy id7
  $jump bb13

bb17:
  _t12 = $call_ext src4()
  _t13 = $arith div _t12 _lo1
  $call_dir fn1(_t13) then bb19

bb18:
  _lo1 = $copy id0
  $jump bb17

bb19:
  _t14 = $call_dir fn1(6) then bb20

bb2:
  id1 = $copy 8
  _t2 = $cmp lt id2 5
  id2 = $copy _t2
  $jump bb1

bb20:
  id7 = $copy _t14
  _t15 = $cmp lt id0 3
  _t16 = $arith sub _t15 3
  id5 = $copy _t16
  id4 = $copy 4
  _t17 = $call_dir fn4(id6) then bb21

bb21:
  _t18 = $call_dir fn1(_t17) then bb22

bb22:
  id7 = $copy _t18
  $jump bb13

bb23:
  _ret35 = $copy 4
  $jump exit

bb24:
  _t19 = $call_dir fn4(9) then bb26

bb25:
  _t20 = $cmp lte 10 id3
  _t21 = $cmp eq _t20 1
  id7 = $copy _t21
  id0 = $copy id7
  $jump bb23

bb26:
  $call_dir fn3(1, id0, _t19) then bb27

bb27:
  id6 = $copy id3
  id7 = $copy 9
  $call_dir fn1(8) then bb28

bb28:
  $jump bb23

bb29:
  _t32 = $call_dir fn2(id5, id1) then bb42

bb3:
  $call_ext src4()
  id0 = $copy id3
  _t3 = $call_dir fn3(id1, id4, 7) then bb4

bb30:
  $branch id4 bb33 bb34

bb31:
  id3 = $copy 8
  _t31 = $call_ext src3()
  id5 = $copy _t31
  $call_dir fn3(9, id1, id5) then bb41

bb32:
  $call_dir fn2(id4, id5) then bb40

bb33:
  id3 = $copy id3
  $call_ext snk6(id4)
  _t22 = $call_dir fn3(id3, 3, id3) then bb35

bb34:
  $call_ext src2()
  _t26 = $arith sub id3 5
  _t27 = $arith sub _t26 6
  $call_ext snk8(_t27, id2)
  _t28 = $call_dir fn4(id6) then bb39

bb35:
  _t23 = $call_dir fn3(8, 8, _t22) then bb36

bb36:
  id3 = $copy _t23
  id4 = $copy id6
  _t24 = $call_dir fn1(2) then bb37

bb37:
  id3 = $copy _t24
  _t25 = $call_ext src7()
  $call_dir fn2(_t25, 1) then bb38

bb38:
  $jump bb32

bb39:
  $call_ext snk3(_t28, id5)
  _t29 = $call_ext src4()
  _t30 = $arith sub _t29 3
  id5 = $copy _t30
  $jump bb32

bb4:
  _t4 = $call_dir fn1(_t3) then bb5

bb40:
  $jump bb29

bb41:
  id7 = $copy 10
  $jump bb29

bb42:
  id0 = $copy _t32
  id6 = $copy id7
  _t33 = $call_dir fn1(id1) then bb43

bb43:
  _t34 = $call_dir fn3(2, _t33, id4) then bb44

bb44:
  _ret35 = $copy _t34
  $jump exit

bb5:
  $call_ext snk7(_t4, 4)
  _t5 = $call_ext src2()
  id5 = $copy _t5
  $jump bb6

bb6:
  $branch 0 bb7 bb8

bb7:
  _t6 = $call_ext src1()
  _t7 = $arith div 9 _t6
  _t8 = $call_dir fn2(_t7, 2) then bb9

bb8:
  $jump bb1

bb9:
  id3 = $copy _t8
  $jump bb6

entry:
  $branch id0 bb2 bb3

exit:
  $ret _ret35
}