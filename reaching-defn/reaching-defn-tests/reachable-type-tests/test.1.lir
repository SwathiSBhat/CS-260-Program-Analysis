struct struct1 {
  f1:int
  f2:&int
}

struct struct2 {
  f1:struct1
  f2:&struct1
}

func1:&() -> int
func2:&(int, &int) -> &struct2
func3:&(int) -> _

struct struct3 {
  f1:&() -> int
  f2:&(int, &int) -> &struct2
  f3:&&(int) -> _
  f4:&() -> int
}

extern e1:() -> int
extern e2:(int) -> int

fn func1() -> int {
entry:
  $ret 42
}

fn func2(p1:int, p2:&int) -> &struct2 {
let _t1:&struct2, x:struct2
entry:
  _t1 = $addrof x
  $ret _t1
}

fn func3(p:int) -> _ {
entry:
  $ret 
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> _ {
let _t1:int, _t2:&int, _t3:&&int, _t4:&&&int, _t5:&&&&int, _t6:struct2, _t7:&struct2, _t8:&&struct2, _t9:struct1, id0:&struct1, id1:&&struct1, id2:&&&struct1, id3:int, id4:struct3, id5:&struct3, id6:&&struct3
entry:
  $ret
}
