f1:&() -> int
f2:&(int, int) -> int
test:&() -> int

extern e1:() -> int
extern e2:(int) -> int

fn f1() -> int {
entry:
  $ret 0
}

fn f2(p:int, q:int) -> int {
entry:
  $ret 0
}

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _t2:int, _t3:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, id0:int, id1:int, id2:int
bb1:
  id0 = $copy _t2
  _t3 = $call_dir f1() then bb2

bb2:
  _t4 = $arith sub 0 _t3
  id2 = $copy _t4
  $branch 9 bb4 bb5

bb3:
  _t5 = $arith div id2 _lo1
  _t6 = $cmp lte _t5 4
  id1 = $copy _t6
  _t7 = $call_ext e2(0)
  _t8 = $call_ext e2(_t7)
  id0 = $copy _t8
  $ret id1

bb4:
  _lo1 = $copy 0
  $jump bb3

bb5:
  _lo1 = $copy 1
  $jump bb3

entry:
  _t2 = $call_dir f1() then bb1
}