test:&() -> int

fn main() -> int {
entry:
  $ret 0
}

fn test() -> int {
let _lo1:int, _t2:int, _t3:int, _t4:int, _t5:int, _t6:int, _t7:int, _t8:int, id0:int, id1:int, id2:int, id3:int, id4:int, id5:int, id6:int, id7:int
bb1:
  $branch 8 bb2 bb3

bb10:
  _t6 = $cmp gt 2 id2
  $branch _t6 bb11 bb12

bb11:
  id0 = $copy 4
  id2 = $copy 9
  id3 = $copy id4
  id7 = $copy id0
  $jump bb10

bb12:
  id2 = $copy 8
  id7 = $copy 2
  $jump bb1

bb13:
  id6 = $copy _lo1
  _t8 = $arith div id2 id3
  $ret _t8

bb14:
  _lo1 = $copy 7
  $jump bb13

bb2:
  _t3 = $arith sub id0 id1
  $branch _t3 bb5 bb6

bb3:
  id4 = $copy 9
  id1 = $copy 0
  _lo1 = $copy 10
  _t7 = $cmp eq _lo1 0
  $branch _t7 bb14 bb13

bb4:
  $jump bb7

bb5:
  id1 = $copy id2
  id4 = $copy 4
  $jump bb4

bb6:
  _t4 = $cmp eq id5 2
  id3 = $copy _t4
  _t5 = $cmp lt 4 2
  id3 = $copy _t5
  $jump bb4

bb7:
  $branch id7 bb8 bb9

bb8:
  id4 = $copy id6
  id6 = $copy 10
  id3 = $copy 5
  id0 = $copy id2
  id5 = $copy id3
  $jump bb7

bb9:
  $jump bb10

entry:
  id0 = $copy 0
  id1 = $copy id1
  id3 = $copy 9
  id2 = $copy id3
  id6 = $copy id2
  _t2 = $arith sub id6 1
  id5 = $copy _t2
  id7 = $copy 3
  $jump bb1
}