f1:&(&int, &int) -> &int 
test:&() -> int

fn f1(p:&int, q:&int) -> &int {
    let _t1:int, _t2:&int  

    entry:
    _t1 = $load q 
    $ret _t2 
}

fn main() -> int {
    entry:
    $ret 0 
}

fn test() -> int {
    let id1:int, _t1:&int, id2:&int, _t3:&int 
    bb1:
    id1 = $copy 4
    _t1 = $addrof id1 
    id2 = $copy _t1 
    $jump bb2 

    bb2:
    _t3 = $call_dir f1(id2,id2) then exit 

    entry:
    $jump bb1 

    exit:
    $ret 0
}